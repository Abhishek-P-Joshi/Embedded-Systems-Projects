C51 COMPILER V9.00   ET_LF                                                                 03/10/2000 16:49:06 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ET_LF
OBJECT MODULE PLACED IN ET-LF.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ET-LF.C BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg51f.h>
   2          #include<i2c.h>
   3          #include<DCMotor.h>
   4          #include<UART_function.h>
   5          #include<lcd.h>
   6          
   7          int adcvolt,j,i;
   8          unsigned char adc,adc1,adc2,adc3,adc4,adc5,temp1,adc6,adc7,adc8,temp2;
   9          unsigned char asciitab[16]={"0123456789ABCDEF"};
  10          unsigned char disp1[20]={"MOTOR FORWARD"};
  11          unsigned char disp2[20]={"MOTOR REVERSE"};
  12          unsigned char disp3[20]={"MOTOR LEFT"};
  13          unsigned char disp4[20]={"MOTOR RIGHT"};
  14          
  15          //float i=1.961;
  16          
  17          void read_adc();
  18          void display();
  19          void calc();
  20          
  21          
  22          void main()
  23          {
  24   1        init_uart();
  25   1       clr_screen();
  26   1        
  27   1        while(1)
  28   1        {
  29   2        adc3='0';
  30   2        adc4='7';
  31   2        adc5='5';
  32   2        display();
  33   2        //read_adc();
  34   2        //calc();
  35   2        
  36   2        
  37   2        if(adc3>='0'&&adc4>'3'&&adc5>'0'&&adc4<'5')
  38   2         {
  39   3           nxt_line();
  40   3               //uart_delay(100);
  41   3               for(j=0;j<=13;j++)
  42   3               {
  43   4                tx(disp1[j]); //motor forward
  44   4               }
  45   3         }
  46   2      
  47   2         if(adc3>='0'&&adc4>'6'&&adc5>'0'&&adc4<'9')
  48   2         {
  49   3               nxt_line();
  50   3           for(i=0;i<=13;i++)
  51   3               {
  52   4                        tx(disp2[i]);  //motor reverse
  53   4               }
  54   3         }
  55   2      
C51 COMPILER V9.00   ET_LF                                                                 03/10/2000 16:49:06 PAGE 2   

  56   2         if(adc3>='0'&&adc4>'9'&&adc5>'0'&&adc3<'2')
  57   2         {
  58   3           nxt_line();
  59   3               for(i=0;i<=11;i++)
  60   3               {
  61   4                tx(disp3[i]); //motor right
  62   4               }
  63   3         }
  64   2      
  65   2         if(adc3>'1'&&adc4>'0'&&adc5>'0')
  66   2         {
  67   3           nxt_line();
  68   3               for(i=0;i<=10;i++)
  69   3               {
  70   4                tx(disp4[i]);  //motor left
  71   4               }
  72   3         }
  73   2         
  74   2        }
  75   1      }
  76          
  77          
  78          
  79          void read_adc()
  80          {
  81   1       start_i2c();
  82   1      
  83   1       shout_i2c(0x90); //device address and write mode
  84   1       ack_i2c();
  85   1      
  86   1       shout_i2c(0x01); //control byte
  87   1       ack_i2c();
  88   1      
  89   1       start_i2c();
  90   1      
  91   1       shout_i2c(0x91); //device address and read mode
  92   1       ack_i2c();
  93   1       
  94   1       adc=shin_i2c();
  95   1       nack_i2c();
  96   1       
  97   1       stop_i2c();
  98   1      
  99   1      }
 100          
 101          void calc()
 102          {
 103   1        adc3=adc/100;
 104   1       temp1=adc%100;
 105   1       adc4=temp1/10;
 106   1       adc5=temp1%10;
 107   1      
 108   1       adc3=asciitab[adc3];
 109   1       adc4=asciitab[adc4];
 110   1       adc5=asciitab[adc5];
 111   1       
 112   1      }
 113          
 114          
 115          void display()
 116          {
 117   1       //clr_screen();
C51 COMPILER V9.00   ET_LF                                                                 03/10/2000 16:49:06 PAGE 3   

 118   1       home_screen();
 119   1       tx(adc3);
 120   1       //     uart_delay(100);
 121   1       tx(adc4);
 122   1       //     uart_delay(100);
 123   1       tx(adc5);
 124   1      //      uart_delay(100);
 125   1      
 126   1       
 127   1       }
 128          
 129          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    957    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =    118       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
